# save this file as docker_generator.py
import ollama

PROMPT = """
ONLY Generate an ideal Dockerfile for {language} with best practices. Do not provide any description
Include:
- Base image
- Installing dependencies
- Setting working directory
- Adding source code
- Running the application
"""

def generate_dockerfile(language):
    response = ollama.chat(model='llama3.1:8b', messages=[{'role': 'user', 'content': PROMPT.format(language=language)}])
    return response['message']['content']

if __name__ == '__main__':
    language = input("Enter the programming language: ")
    dockerfile = generate_dockerfile(language)
    print("\nGenerated Dockerfile:\n")
    print(dockerfile)

#create one more file with name requirements.txt
ollama


# steps to follow 

Installing Ollama
Download and Install Ollama

# For Linux
curl -fsSL https://ollama.com/install.sh | sh

# For MacOS
brew install ollama
Start Ollama Service

ollama serve
Pull Llama3 Model

ollama pull llama3.2:1b
ðŸš€ Project Setup
Create Virtual Environment

python3 -m venv venv
source venv/bin/activate  # On Linux/MacOS
# or
.\venv\Scripts\activate  # On Windows
Install Dependencies

pip3 install -r requirements.txt
Run the Application

python3 generate_dockerfile.py
ðŸ’¡ How It Works
The script takes a programming language as input (e.g., Python, Node.js, Java)
Connects to the Ollama API running locally
Generates an optimized Dockerfile with best practices for the specified language
Returns the Dockerfile content with explanatory comments
